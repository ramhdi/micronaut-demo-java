plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.10"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    // Micronaut platform BOM for version management
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))

    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi:3.4.3")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut.openapi:micronaut-openapi:3.4.3")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("jakarta.validation:jakarta.validation-api:3.1.1")

    runtimeOnly("ch.qos.logback:logback-classic")
}

application {
    mainClass.set("com.example.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

// Enable OpenAPI views generation
tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs.add('-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,rapidoc.enabled=true')
}